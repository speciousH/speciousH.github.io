<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始搭建个人博客(基础构建)</title>
      <link href="/2024/01/28/dustbin/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA)/"/>
      <url>/2024/01/28/dustbin/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA)/</url>
      
        <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><mark class="hl-label red">写在前面</mark> </h3><blockquote><ul><li><span class='p yellow'>本文旨在个人折腾随记，如有错误，恳请斧正！</span></li><li><span class='p cyan'>欢迎浏览本文，希望可以对你有所帮助。</span></li><li><span class='p red'>下文的所有操作均基于</span> <mark class="hl-label orange">Windows</mark>  <span class='p red'>系统，其他系统仅作搭建思路参考。</span></li></ul></blockquote><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、<mark class="hl-label red">工具安装</mark> </h3><blockquote><span class='p yellow'>在进行搭建之前，我们需要安装一下使用工具：NVM、Git、Hexo。</span></blockquote><ol><li><mark class="hl-label blue">NVM</mark> </li></ol><blockquote><ul><li>NVM 是一个开源项目，是一个用于管理 node.js 和 npm 版本的工具，可以用来切换不同版本的 node.js。<br>安装 NVM 是为了更好的使用node.js。</li><li>通过下面的链接可以获取 NVM 在 GitHub 上的信息。</li></ul></blockquote><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://github.com/coreybutler/nvm-windows/releases">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">nvm-GitHub</div>            <div class="tag-link-sitename"> A node.js version management utility for Windows. Ironically written in Go.</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div><blockquote><ul><li>打开网站后下载最新版本的 nvm-setup.exe 或 nvm-setup.zip <a href="https://blog.csdn.net/New_hl/article/details/134457871?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-134457871-blog-113857145.235%5Ev43%5Epc_blog_bottom_relevance_base9&spm=1001.2101.3001.4242.3&utm_relevant_index=7" title="请点击访问学习安装nvm">安装</a>即可。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v16.18.1</span><br><span class="line"></span><br><span class="line">$ npm -v                                                                           </span><br><span class="line">8.19.2</span><br></pre></td></tr></table></figure><ol start="2"><li><mark class="hl-label blue">Git</mark> </li></ol><blockquote><ul><li>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</li><li>下载安装时只需要访问<a href="https://git-scm.com/download" title="fast-version-control">官网</a>下载最新版本点击下一步安装即可。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.43.0.windows.1</span><br></pre></td></tr></table></figure><ol start="3"><li><mark class="hl-label blue">Hexo</mark> </li></ol><blockquote><ul><li>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li><li>提前准备好一个空的文件夹，后续操作将全部基于此。</li><li>在文件夹中右键打开 Open Git Bash here，键入安装 Hexo 命令。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure><blockquote><ul><li>无报错信息则继续进行，有报错信息需要解决掉后再继续，一般在这里的报错基本都是工具版本问题。</li><li>排查问题后继续执行下述命令，出现以下信息则说明安装成功。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo: 6.3.0</span><br><span class="line">hexo-cli: 4.3.1</span><br><span class="line">os: win32 10.0.19045</span><br><span class="line">node: 16.18.1</span><br><span class="line">v8: 9.4.146.26-node.22</span><br><span class="line">uv: 1.43.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">icu: 71.1</span><br><span class="line">tz: 2022b</span><br><span class="line">unicode: 14.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">nghttp3: 0.7.0</span><br></pre></td></tr></table></figure><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、<mark class="hl-label red">建站与主题</mark> </h3><blockquote><span class='p yellow'>先建站，然后选择主题并安装。</span></blockquote><ol><li><mark class="hl-label blue">建站</mark> </li></ol><blockquote><ul><li>请按照<a href="https://hexo.io/zh-cn/docs/setup" title="Hexo 建站操作">Hexo 官方文档</a>进行建站。</li></ul></blockquote><ol start="2"><li><mark class="hl-label blue">主题安装</mark> </li></ol><blockquote><ul><li>基础的 Hexo 页面运行起来时并不好看，因此选择一款优雅的主题至关重要。</li><li>本文选择了使用 <a href="https://blog.anheyu.com/" title="AnZhiYu的主页">安知鱼大佬</a>的主题，具体安装操作步骤可移步至<a href="https://docs.anheyu.com/" title="这可是官方网站">主题文档</a>学习。</li><li>下面只针对本文在安装途中遇到的问题做解答。</li></ul></blockquote><h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、<mark class="hl-label red">过程回顾</mark> </h3><ol><li><mark class="hl-label blue">安装回顾</mark> </li></ol><blockquote><ul><li>安装时尽量使用官方文档中推荐的 <span class='p yellow'>git clone</span> 方式，</li><li>如果提示 <span class='p red'>fatal: unable to access https://github.com/...</span>，可以执行下面的语句解决，解决后重新 clone 即可。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在开启shadowsocks的前提下，手动配置git的代理。</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><ol start="2"><li><mark class="hl-label blue">时间配置回顾</mark> </li></ol><blockquote><ul><li>在参照文档进行配置时，有三个时间的配置，分别是：</li><li>位于 Hexo 配置文件中的 <mark class="hl-label purple">timezone</mark>  参数；</li><li>位于 AnZhiYu 主题配置文件中的 <mark class="hl-label purple">footer</mark>  下的 <mark class="hl-label purple">runtime</mark>  下的 <mark class="hl-label purple">launch_time</mark>  参数；</li><li>位于 AnZhiYu 主题配置文件中的 <mark class="hl-label purple">runtimeshow</mark>  参数。</li><li>这三个参数需要配置为如下，否则时间计算有误。</li></ul></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 时区</span></span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"><span class="section"># 侧边栏时间显示</span></span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish<span class="emphasis">_date: 2024/01/04 00:00:01</span></span><br><span class="line"><span class="emphasis"># 页脚时间显示</span></span><br><span class="line"><span class="emphasis">runtime:</span></span><br><span class="line"><span class="emphasis">  enable: true</span></span><br><span class="line"><span class="emphasis">  launch_</span>time: 2024/01/04 00:00:01 # 网站上线时间</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><mark class="hl-label red">结语</mark> </h3><blockquote><ul><li>参照主题文档配置好之后，博客的基本就搭建好了。</li><li>运行时可以键入 <kbd>hexo cl && hexo g && hexo server</kbd> 运行。</li><li>本文内容到此结束，下篇章预告：<mark class="hl-label blue">图床与部署</mark> 。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂⑦杂⑧ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
            <tag> AnZhiYu主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 技能之 String 类的常用方法</title>
      <link href="/2024/01/21/dustbin/Java-%E6%8A%80%E8%83%BD%E4%B9%8B-String-%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2024/01/21/dustbin/Java-%E6%8A%80%E8%83%BD%E4%B9%8B-String-%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="String-类的常用方法"><a href="#String-类的常用方法" class="headerlink" title="String 类的常用方法"></a>String 类的常用方法</h2><p>​String 类提供的各个方法一定要背下来。</p><h3 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h3><p>​String 在所有项目的开发中都一定要使用到，那么在 String 类里面提供了一系列的功能操作方法，这里学习大部分操作方法。</p><p>​对于系统类的方法，一定要去查询文档，一些不常用的方法允许不知道，但是一定要会查，而对于 String 类的方法对于使用的情况比较多，为了方便开发必须背。</p><blockquote><p>  查询地址：D:\work\JDK\jdk-8u341-docs-all\docs\api\index.html。</p></blockquote><p>​对于每一个文档的内容而言，它都由以下的几部分所组成：</p><ul><li>类的定义以及相关的继承结构；</li><li>类的一些简短的说明；</li><li>类中的成员组成；</li><li>类中所提供的构造方法；</li><li>类中所提供的普通方法；</li><li>成员、构造方法、普通方法的详细说明；</li></ul><h4 id="1-1、字符与字符串"><a href="#1-1、字符与字符串" class="headerlink" title="1.1、字符与字符串"></a>1.1、字符与字符串</h4><p>​很多的语言之中都是利用了字符数组的概念来描述字符串的信息，这一点在 String 类的方法上也都有所提示。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String(char[] value)</td><td align="center">构造</td><td align="center">将字符数组变为 String 类对象</td></tr><tr><td align="center">2</td><td align="center">public String(char[] value, int offset,  int count)</td><td align="center">构造</td><td align="center">将部分字符数字变为 String 类对象</td></tr><tr><td align="center">3</td><td align="center">public char charAt(int index)</td><td align="center">普通</td><td align="center">返回指定索引对应的字符信息</td></tr><tr><td align="center">4</td><td align="center">public char[] toCharArray()</td><td align="center">普通</td><td align="center">将字符串以字符数组的形式返回</td></tr></tbody></table><p><strong>范例</strong>：取出指定索引的字符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span>  <span class="variable">c</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​程序之中字符串的下标都是从 0 开始的。</p><p><strong>范例</strong>：字符数组与字符串的转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> [] data = str.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x++) &#123;</span><br><span class="line">System.out.println(data[x] + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：将字符串转大写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> [] data = str.toCharArray();<span class="comment">// 将字符串变为字符数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x++) &#123;</span><br><span class="line">data[x] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data));<span class="comment">// 将全部字符数组变为 Stirng</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">1</span>,<span class="number">2</span>));<span class="comment">// 将部分字符数组变为 Stirng</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：给定一个字符串，要求判断其是否由数字组成</p><p><strong>思路</strong>：如果整个字符串要判断是不是数字无法实现，但是可以将字符串变为字符数组，而后判断每一个字符的内容是否是数字，如果该字符的范围在（‘0’~‘9’）指定的范畴之内，那么就是数字。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;323a543352&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (isNumber(str)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;字符串由数字组成.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;字符串由非数字组成!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断字符串是否由数字所组成, 如果是返回true, 否则返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String temp)</span> &#123;</span><br><span class="line"><span class="comment">// 将字符串变为字符数组, 这样就可以取出每一位字符进行判断</span></span><br><span class="line"><span class="type">char</span> [] data = temp.toCharArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (data[x] &gt; <span class="string">&#x27;9&#x27;</span> || data[x] &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 后续不再判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 如果全部验证通过返回true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​如果写的某一个方法返回的内容是 boolean，那么习惯性的做法是将其以“isXxx”命名。</p><h4 id="1-2、字节与字符串"><a href="#1-2、字节与字符串" class="headerlink" title="1.2、字节与字符串"></a>1.2、字节与字符串</h4><p>​字节使用 byte 描述，使用字节一般主要用于数据的传输或者进行编码转换的时候使用，而在 String 类里卖弄就提供有将字符串变为字节数组的操作，目的就是为了传输以及编码转换。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String(byte[] bytes)</td><td align="center">构造</td><td align="center">将全部字节数组变为字符串</td></tr><tr><td align="center">2</td><td align="center">public String(byte[] bytes, int offset, int length)</td><td align="center">构造</td><td align="center">将部分字节数组变为字符串</td></tr><tr><td align="center">3</td><td align="center">public byte[] getBytes()</td><td align="center">普通</td><td align="center">将字符串变为字节数组</td></tr><tr><td align="center">4</td><td align="center">public byte[] getBytes(String charsetName) throws UnsupportedEncodingException</td><td align="center">普通</td><td align="center">进行编码转换</td></tr></tbody></table><p><strong>范例</strong>：观察字符串与字节数组的转换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">byte</span> [] data = str.getBytes(); <span class="comment">// 将字符串变为字节数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x ++) &#123;</span><br><span class="line">data[x] -= <span class="number">32</span>; <span class="comment">// 将小写字母变为大写</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data)); <span class="comment">// 全部转换</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">5</span>,<span class="number">5</span>)); <span class="comment">// 部分转换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​因为现在操作的是英文字母，所以感觉与字符类似。在 IO 操作的时候会牵扯到字节数组的操作，在后续的开发中会逐步接触到乱码的处理问题。</p><h4 id="1-3、字符串的比较"><a href="#1-3、字符串的比较" class="headerlink" title="1.3、字符串的比较"></a>1.3、字符串的比较</h4><p>​如果要进行字符串内容相等的判断使用 equals ()，但是在 String 类里面定义的比较判断不止这一个。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public boolean equals(String anObject)</td><td align="center">普通</td><td align="center">进行相等判断，区分大小写</td></tr><tr><td align="center">2</td><td align="center">public boolean equalsIgnoreCase(String anotherString)</td><td align="center">普通</td><td align="center">进行相等判断，不区分大小写</td></tr><tr><td align="center"><em><strong>3</strong></em></td><td align="center"><em><strong>public int compareTo(String anotherString)</strong></em></td><td align="center"><em><strong>普通</strong></em></td><td align="center"><em><strong>判断两个字符串的大小（按照字符编码比较），此方法的返回值有如下三种结果：&#x3D;0：表示比较的两个字符串内容相等；&gt;0：表示大于的结果；&lt;0：表示小于的结果；</strong></em></td></tr></tbody></table><p><strong>范例</strong>：相等判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">stra</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strb</span> <span class="operator">=</span> <span class="string">&quot;hElLo&quot;</span>;</span><br><span class="line">System.out.println(stra.equals(strb));<span class="comment">// 区分大小写 false</span></span><br><span class="line">System.out.println(stra.equalsIgnoreCase(strb));<span class="comment">// 不区分大小写 true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：观察 compareTo()方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">stra</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strb</span> <span class="operator">=</span> <span class="string">&quot;hEllo&quot;</span>;</span><br><span class="line">System.out.println(stra.compareTo(strb));<span class="comment">// 32,大于0</span></span><br><span class="line"><span class="comment">// 可以利用大小等于0的方式来判断大小</span></span><br><span class="line"><span class="keyword">if</span> (stra.compareTo(strb) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;大于&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​现在只有 String 类的对象才具有大小的关系判断。</p><h4 id="1-4、字符串查找"><a href="#1-4、字符串查找" class="headerlink" title="1.4、字符串查找"></a>1.4、字符串查找</h4><p>​从一个完整的字符串之中要判断某一个子字符串是否存在，这一功能可以使用如下的方法完成。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><em><strong>1</strong></em></td><td align="center"><em><strong>public boolean contains(String s)</strong></em></td><td align="center"><em><strong>普通</strong></em></td><td align="center"><em><strong>判断指定的内容是否存在</strong></em></td></tr><tr><td align="center">2</td><td align="center">public int indexOf(String str)</td><td align="center">普通</td><td align="center">从前向后查找指定字符串的位置，如果查找到了则返回（第一个字母）位置索引，如果查不到则返回 -1</td></tr><tr><td align="center">3</td><td align="center">public int indexOf(String str, int fromIndex)</td><td align="center">普通</td><td align="center">由指定位置从前向后查找指定字符串的位置，找不到依然返回 -1</td></tr><tr><td align="center">4</td><td align="center">public int lastIndexOf(String str)</td><td align="center">普通</td><td align="center">由后向前查找指定字符串的位置，找不到返回 -1</td></tr><tr><td align="center">5</td><td align="center">public int lastIndexOf(String str, int fromIndex)</td><td align="center">普通</td><td align="center">由后向前从指定位置查找指定字符串的位置，找不到返回 -1</td></tr><tr><td align="center">6</td><td align="center">public boolean startsWith(String prefix)</td><td align="center">普通</td><td align="center">判断是否以指定的字符串开头</td></tr><tr><td align="center">7</td><td align="center">public boolean startsWith(String prefix, int toffset)</td><td align="center">普通</td><td align="center">由指定位置开始判断是否指定的字符串开头</td></tr><tr><td align="center">8</td><td align="center">public boolean endsWith(String suffix)</td><td align="center">普通</td><td align="center">判断是否以指定的字符串结尾</td></tr></tbody></table><p><strong>范例</strong>：使用 indexOf()等功能查找</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="comment">// 返回满足条件单词的第一个字母的索引</span></span><br><span class="line">System.out.println(str.indexOf(<span class="string">&quot;world&quot;</span>));</span><br><span class="line"><span class="comment">// 返回的是第一个查找到的</span></span><br><span class="line">System.out.println(str.indexOf(<span class="string">&quot;l&quot;</span>));</span><br><span class="line">System.out.println(str.indexOf(<span class="string">&quot;l&quot;</span>,<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 从后开始查找</span></span><br><span class="line">System.out.println(str.lastIndexOf(<span class="string">&quot;l&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​以上的过程都只是返回了一个位置。但是在一些的程序之中需要告诉用户的是有没有的结果，最早的结果是判断查询结果是不是 “-1”来判断实现的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">&quot;world&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 能找到</span></span><br><span class="line">System.out.println(<span class="string">&quot;可以查询到数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​但是从 JDK1.5 开始之后出现了 contains()方法， 这个方法可以直接返回 boolean 。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str.contains(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">// 能找到</span></span><br><span class="line">System.out.println(<span class="string">&quot;可以查询到数据。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>     使用 contains() 更加的简单，并且在整个 java 里面，contains 已经成为了查询的代名词。</code></pre><p><strong>范例</strong>：开头或结尾判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;##@@hello**&quot;</span>;</span><br><span class="line">System.out.println(str.startsWith(<span class="string">&quot;##&quot;</span>));</span><br><span class="line">System.out.println(str.startsWith(<span class="string">&quot;@@&quot;</span>,<span class="number">2</span>));</span><br><span class="line">System.out.println(str.endsWith(<span class="string">&quot;**&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这些开头和结尾的判断往往可以作为一些标记在程序之中出现。</p><h4 id="1-5、字符串替换"><a href="#1-5、字符串替换" class="headerlink" title="1.5、字符串替换"></a>1.5、字符串替换</h4><p>​指的使用一个新的字符串替换掉旧的字符串数据，支持的方法如下。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String replaceAll(String regex, String replacement)</td><td align="center">普通</td><td align="center">用新的内容替换掉全部旧的内容</td></tr><tr><td align="center">2</td><td align="center">public String replaceFisrt(String regex, String replacement)</td><td align="center">普通</td><td align="center">替换首个满足条件的内容</td></tr></tbody></table><p><strong>范例</strong>：观察替换的结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">resultA</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;_&quot;</span>); <span class="comment">// 全部替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resultB</span> <span class="operator">=</span> str.replaceFirst(<span class="string">&quot;l&quot;</span>, <span class="string">&quot;_&quot;</span>); <span class="comment">// 替换首个</span></span><br><span class="line">System.out.println(resultA);</span><br><span class="line">System.out.println(resultB);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​学完正则之后，对于替换的操作会有新的特征出现。</p><h4 id="1-6、字符串截取"><a href="#1-6、字符串截取" class="headerlink" title="1.6、字符串截取"></a>1.6、字符串截取</h4><p>​从一个完整的字符串之中可以截取部分的子字符串数据，支持的方法如下。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String substring(int beginIndex)</td><td align="center">普通</td><td align="center">从指定索引截取到结尾</td></tr><tr><td align="center">2</td><td align="center">public String substring(int beginIndex, int endIndex)</td><td align="center">普通</td><td align="center">截取部分子字符串</td></tr></tbody></table><p><strong>范例</strong>：验证操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">resultA</span> <span class="operator">=</span> str.substring(<span class="number">5</span>); <span class="comment">// 从指定索引截取到结尾</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resultB</span> <span class="operator">=</span> str.substring(<span class="number">0</span>,<span class="number">5</span>); </span><br><span class="line">System.out.println(resultA);</span><br><span class="line">System.out.println(resultB);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​数据库中也有 substring 函数，可以使用负数做开始节点，但是那是数据库中的函数由于考虑到有可能是非专业的人员进行使用，所以有些代码做了一些调整，而程序是要求严谨性的，所以不可能使用复数作为截取的开始点。</p><h4 id="1-7、字符串拆分"><a href="#1-7、字符串拆分" class="headerlink" title="1.7、字符串拆分"></a>1.7、字符串拆分</h4><p>​将一个完整的字符串，按照指定的内容拆分为字符串数组（对象数组，String 对象），方法如下。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String[] split(String regex)</td><td align="center">普通</td><td align="center">按照指定的字符串进行全部拆分</td></tr><tr><td align="center">2</td><td align="center">public String[] split(String regex, int limit)</td><td align="center">普通</td><td align="center">按照指定的字符串进行部分拆分，最后的数组长度就是由 limit （如果能拆分的结果很多，数组长度才会由 limit 决定）决定的，即，前面拆，后面不拆</td></tr></tbody></table><p><strong>范例</strong>：进行全部拆分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world nihao hdty&quot;</span>;</span><br><span class="line"><span class="comment">// 按照空格全部拆分</span></span><br><span class="line">String result [] = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; result.length; x ++) &#123;</span><br><span class="line">System.out.println(result[x] + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​如果在拆分的时候只是写了以恶搞空字符串（“”不是null），表示按照每一个字符进行拆分。</p><p><strong>范例</strong>：部分拆分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello world nihao hdty&quot;</span>;</span><br><span class="line"><span class="comment">// 按照空格部分拆分</span></span><br><span class="line">String result [] = str.split(<span class="string">&quot; &quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; result.length; x ++) &#123;</span><br><span class="line">System.out.println(result[x] + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>：实现 IPv4 地址拆分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;192.168.1.2&quot;</span>;</span><br><span class="line"><span class="comment">// 直接写.会无法拆分,是由于正则表达式中, .表示匹配除换行符\n之外的任何单字符</span></span><br><span class="line"><span class="comment">// 若想在此处按照.拆分,则选哟使用两个\进行转义</span></span><br><span class="line">String result [] = str.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; result.length; x ++) &#123;</span><br><span class="line">System.out.println(result[x] + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​如果一些敏感字符（正则标记）严格来讲是拆分不了，如果真的遇见了拆分不了的情况那么使用“\（就是一个杠）”，进行转义后 才可以拆分。</p><p>​在实际的开发之中，拆分的操作时非常常见的，因为很多的时候会传递一组数据到程序之中进行处理，例如有如下的一个字符串：“张三：20|李四：21|王五：22…”（姓名：年龄|姓名：年龄…）。当接收到此数据时，必须要对数据进行拆分。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;张三:20|李四:21|王五:22&quot;</span>;</span><br><span class="line"><span class="comment">// 直接写.会无法拆分,是由于正则表达式中, .表示匹配除换行符\n之外的任何单字符</span></span><br><span class="line"><span class="comment">// 若想在此处按照.拆分,则选哟使用两个\进行转义</span></span><br><span class="line">String result [] = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; result.length; x ++) &#123;</span><br><span class="line">String temp [] = result[x].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;姓名: &quot;</span> + temp[<span class="number">0</span>] + <span class="string">&quot;, 年龄: &quot;</span> + temp[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-8、其他方法"><a href="#1-8、其他方法" class="headerlink" title="1.8、其他方法"></a>1.8、其他方法</h4><p>​以上给出的方法是可以归类的，但是在 String 里面也有一部分方法是不能归类的。</p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">public String concat(String str)</td><td align="center">普通</td><td align="center">字符串连接，与 “+” 类似</td></tr><tr><td align="center">2</td><td align="center">public String toLowerCase()</td><td align="center">普通</td><td align="center">转小写</td></tr><tr><td align="center">3</td><td align="center">public String toUpperCase()</td><td align="center">普通</td><td align="center">转大写</td></tr><tr><td align="center">4</td><td align="center">public String trim()</td><td align="center">普通</td><td align="center">去掉字符串中左右两边的空格， 中间空格保留</td></tr><tr><td align="center">5</td><td align="center">public int length()</td><td align="center">普通</td><td align="center">取得字符串长度</td></tr><tr><td align="center">6</td><td align="center">public String intern()</td><td align="center">普通</td><td align="center">数据入池</td></tr><tr><td align="center">7</td><td align="center">public boolean isEmpty()</td><td align="center">普通</td><td align="center">判断是否为空（为空不是为 null）</td></tr><tr><td align="center">8</td><td align="center">public boolean isNotEmpty()</td><td align="center">普通</td><td align="center">判断是否为非空</td></tr></tbody></table><p><strong>范例</strong>： 字符串连接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">stra</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strb</span> <span class="operator">=</span> stra.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">strc</span> <span class="operator">=</span> <span class="string">&quot;hello &quot;</span> + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">System.out.println(strb == strc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>： 转小写与转大写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;??&#123;&#123;Hello**&#125;&quot;</span>;</span><br><span class="line">System.out.println(str.toUpperCase());</span><br><span class="line">System.out.println(str.toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​所有的非字母数据不会进行任何的转换操作。</p><p><strong>范例</strong>：去掉空格</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;     hel lo    &quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;[&quot;</span> + str.trim() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​一般在用户进行数据输入的时候有可能会携带有无用的空格内容， 那么接收到这些数据后就需要消除掉所有空格。</p><p><strong>范例</strong>：获取长度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;     hel lo    &quot;</span>;</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在某些情况下要求用户输入的数据长度是有限制的，可以利用此方式判断。数组中也有一个 length 属性， 但是调用的形式不同： </p><ul><li>数组对象.length;</li><li>String 对象.length();</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂⑦杂⑧ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 学习指南之 JavaSE (Part One)</title>
      <link href="/2024/01/21/dustbin/Java-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E4%B9%8B-JavaSE-Part-One/"/>
      <url>/2024/01/21/dustbin/Java-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97%E4%B9%8B-JavaSE-Part-One/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-学习指南之-JavaSE-Part-One"><a href="#Java-学习指南之-JavaSE-Part-One" class="headerlink" title="Java 学习指南之 JavaSE (Part One)"></a>Java 学习指南之 JavaSE (Part One)</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java 的学习路线主要分为四个部分. </p><p>第一部分是 JavaSE, 是 Java 学习的入门基础部分, 在学习过程中, 我们需要在这部分打下良好的基础, 才能在后续高级开发时更加快速上手, 因为框架的底层逻辑也是由基础构成的. </p><p>第二部分是 Java 前端开发, 包含了例如 HTML, CSS, HTTP协议, Ajax 等知识, 以便于发展成为全栈工程师或者能够帮助我们更好地将前后端连接, 总之就是, 不搞前端也得明白一点. </p><p>第三部分是 Java 开发框架, 学会框架, 意味着可以简单地进行一些大型项目的实现操作, 例如”大名鼎鼎”的 SSM 和 SSH 的框架整合开发, 使用这样的模式去开发, 会有诸多好处, 例如降低耦合度等. </p><p>第四部分是 JavaEE, 这部分的学习是为了深入企业项目的开发, 是可以帮助我们成为中级甚至高级开发工程师的一部分, 此处不多介绍. </p><p>看着如此复杂的 Java 学习路线, 你是不是有些力不从心? 不用担心, 本模块将会从零开始, 一步步建立 Java 的学习笔记. 本文也将梳理第一部分 JavaSE 的笔记, 希望能够对你有所帮助, 欢迎浏览白嫖! </p><h3 id="Java-语言概述"><a href="#Java-语言概述" class="headerlink" title="Java 语言概述"></a>Java 语言概述</h3><h4 id="软件开发介绍"><a href="#软件开发介绍" class="headerlink" title="软件开发介绍"></a>软件开发介绍</h4><p>软件, 即一系列按照特性顺序组织的计算机数据和指令的集合, 有<strong>系统软件</strong>和<strong>应用软件</strong>之分. </p><p>软件开发包含两种人机交互的方式: </p><ul><li><strong>图形化界面(GUI)</strong>: 这种方式简单直观, 容易上手操作. </li><li><strong>命令行方式(CLI)</strong>: 这种方式需要一个控制台, 输入特定的指令, 从而让计算机完成一系列操作, 较为复杂, 上手难度高(用命令行可以更好地帮助记忆命令).</li></ul><p>常用的 dos 命令有: </p><ul><li><strong>dir</strong> : 列出当前目录下的文件以及文件夹</li><li><strong>md</strong> : 创建目录</li><li><strong>rd</strong> : 删除目录(目录内为空才可删除)</li><li><strong>cd</strong> : 进入指定目录</li><li><strong>cd..</strong> : 退回到上一级目录</li><li><strong>cd</strong>\ : 退回到根目录</li><li><strong>del</strong> : 删除文件</li><li><strong>exit</strong> : 退出 dos 命令行</li><li><strong>d:</strong> : 进入 D 盘(切换磁盘)</li></ul><h4 id="Java-语言概述-1"><a href="#Java-语言概述-1" class="headerlink" title="Java 语言概述"></a>Java 语言概述</h4><table><thead><tr><th>Java 技术平台体系</th></tr></thead><tbody><tr><td><strong>Java SE 标准版</strong></td></tr><tr><td>支持面向桌面级应用(如 Windows 下的应用程序)的 Java 平台, 提供了完整的 Java 核心 api, 此版本以前称为 J2SE.</td></tr><tr><td><strong>Java EE 企业版</strong></td></tr><tr><td>是为开发企业环境下的应用程序提供的一套解决方案. 该技术体系中包含的技术如 Servlet, Jsp 等, 主要针对于 Web 应用程序开发, 此版本以前称为 J2EE.</td></tr><tr><td><strong>Java ME 小型版</strong></td></tr><tr><td>支持 Java 程序运行在移动终端上的平台, 对 Java api 有所精简, 并加入了针对移动终端的支持, 此版本以前称为 J2ME.</td></tr><tr><td><strong>Java Card</strong></td></tr><tr><td>支持一些 Java 小程序(Applets)运行在小内存设备(如智能卡)上的平台.</td></tr></tbody></table><p>从 Java 的应用领域来分, Java 语言的应用方向主要表现在以下几个方面: </p><ul><li><strong>企业级应用</strong>: 主要指复杂的大企业的软件系统, 各种类型的网站. Java 的安全机制以及它的跨平台的优势, 使它在分布式系统领域开发中有广泛应用. </li><li><strong>Android 平台应用</strong>: Android 应用程序使用 Java 语言编写. Android 开发水平的高低很大程度上取决于 Java 语言核心能力是否扎实.</li><li><strong>大数据平台开发</strong>: 各类框架有 Hadoop, spark, storm, flink 等, 就这类技术生态圈来讲, 还有各种中间件如 flume, kafka, sqoop 等等, 这些框架及工具大多数是用 Java 编写而成的, 但提供诸如 Java, scala, Python, R 等各种语言 api 供编辑.</li><li><strong>移动领域应用</strong>: 主要表现在消费和嵌入式领域.</li></ul><h4 id="运行机制及运行过程"><a href="#运行机制及运行过程" class="headerlink" title="运行机制及运行过程"></a>运行机制及运行过程</h4><p>Java 语言的特点: </p><ul><li><strong>面向对象</strong>: 两个基本概念(<strong>类</strong>, <strong>对象</strong>), 三大特性(<strong>封装</strong>, <strong>继承</strong>, <strong>多态</strong>);</li><li><strong>健壮性</strong>: 吸收了 C&#x2F;C++ 语言的优点, 但去掉了其影响程序健壮性的部分(如指针, 内存的申请与释放等), 提供了一个相对安全的内存管理和访问机制. </li><li><strong>跨平台性</strong>: 通过 Java 语言编写的应用程序在<strong>不同的</strong>系统平台(Windows, Linux, Mac)上都可以运行. “Write once, Run anywhere. “ <strong>原理</strong>: 只要在需要运行 Java 应用程序的操作系统上, 先安装一个 Java虚拟机(JVM)即可, 由 JVM 来负责 Java 程序在该系统中的运行.</li></ul><p>Java 两种核心机制: <strong>Java 虚拟机 (JVM)</strong> 和<strong>垃圾收集机制</strong>. </p><ul><li>Java 虚拟机, 即一个虚拟的计算机, 具有指令集并使用不同的存储区域, 负责执行指令, 管理数据, 内存, 寄存器.</li><li>不再使用的内存空间应回收—<strong>垃圾回收</strong>, Java 语言消除了程序员回收无用内存空间的责任, 提供了一种系统级线程跟踪存储空间的分配情况, 并在  JVM 空闲时, 检查并释放哪些可被释放的存储空间. </li><li>垃圾回收在 Java 程序运行过程中<strong>自动执行</strong>, 程序员无法精确控制和干预. </li><li>即使存在垃圾回收机制, Java 程序<strong>仍然会出现</strong>内存泄漏和内存溢出的问题.</li></ul><h4 id="Java-环境搭建"><a href="#Java-环境搭建" class="headerlink" title="Java 环境搭建"></a>Java 环境搭建</h4><p>在学习环境搭建之前, 我们首先需要明白, 什么是 JDK, 什么是 JRE.</p><table><thead><tr><th>什么是 JDK, JRE</th></tr></thead><tbody><tr><td><strong>JDK(Java Development Kit   Java 开发工具包)</strong></td></tr><tr><td>JDK 是提供给 Java 开发人员使用的, 其中包含了 Java 的开发工具, 也包括了 JRE. 开发工具则包括: 编译工具( javac.exe )和打包工具( jar.exe )等.</td></tr><tr><td><strong>JRE(Java Runtime Environment   Java运行环境)</strong></td></tr><tr><td>包括 Java 虚拟机(JVM)和 Java 程序所需的核心类库等, 如果只是需要运行一个开发好的 Java 程序, 计算机中只安装 JRE 即可.</td></tr></tbody></table><p>简而言之, 使用 JDK 的开发工具完成的 Java 程序, 交给 JRE 去运行. JDK 包含 JRE 包含 JVM.</p><ul><li>安装 JDK(1.8) 和 JRE 时需要注意安装目录不要选择默认的, 同时将版本号书名.</li></ul><h4 id="第一条代码—Hello-World"><a href="#第一条代码—Hello-World" class="headerlink" title="第一条代码—Hello World"></a>第一条代码—Hello World</h4><p>阿松大</p><h4 id="常见问题及解决方法"><a href="#常见问题及解决方法" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h4><p>实打实</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>实打实</p><h4 id="Java-API-文档"><a href="#Java-API-文档" class="headerlink" title="Java API 文档"></a>Java API 文档</h4><p>十大</p><h4 id="规范编程习惯"><a href="#规范编程习惯" class="headerlink" title="规范编程习惯"></a>规范编程习惯</h4><p>艾师傅的师傅</p><h4 id="常用开发工具"><a href="#常用开发工具" class="headerlink" title="常用开发工具"></a>常用开发工具</h4><p>撒旦发生</p>]]></content>
      
      
      <categories>
          
          <category> 杂⑦杂⑧ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 技能之 正则表达式</title>
      <link href="/2024/01/20/dustbin/Java-%E6%8A%80%E8%83%BD%E4%B9%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/01/20/dustbin/Java-%E6%8A%80%E8%83%BD%E4%B9%8B-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="知识点目标"><a href="#知识点目标" class="headerlink" title="知识点目标"></a>知识点目标</h3><ul><li>所有的开发一定要有正则的支持; </li><li>需要记下常用的正则标记; </li><li>掌握 String 类对正则的支持.</li></ul><h3 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h3><h4 id="3-1、问题引出"><a href="#3-1、问题引出" class="headerlink" title="3.1、问题引出"></a>3.1、问题引出</h4><p>​为了更好的说明正则的应用, 下面要求编写一个程序: 判断一个字符串是否由数字所组成. </p><p>​实现原理: </p><ul><li>将字符串变为字符数组; </li><li>而后判断每一个字符是否在 “‘0’~’9’” 字符范围之间.</li></ul><p><strong>范例</strong>: 实现字符串的判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span> ;</span><br><span class="line">System.out.println(isNumber(str));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String temp)</span> &#123;</span><br><span class="line"><span class="type">char</span> data [] = temp.toCharArray() ; <span class="comment">// 将字符串变为字符数组, 目的是循环取出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; data.length ; x ++) &#123;</span><br><span class="line"><span class="keyword">if</span> (data[x] &gt; <span class="string">&#x27;9&#x27;</span> || data[x] &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​此时, 判断字符串是否由数字所组成, 是一个和容易实现的功能, 但是这样简单的操作却写出了八行代码, 那么如果说现在是更加复杂的操作呢? </p><p><strong>范例</strong>: 更简单的做法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12a3&quot;</span> ;</span><br><span class="line">System.out.println(str.matches(<span class="string">&quot;\\d+&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​一个写了很多行的代码, 最后只是写了一行简单的操作就实现了, 而其中出现的 “\d+” 就是正则表达式. </p><p>​所有正则支持的类都定义在 java.util.regex 包中. 在这个包里面定义了两个主要的类: </p><ul><li>Pattern 类: 此类对象如果要想取得, 就必须使用 compile() 方法, 方法的功能是编译正则; </li><li>Matcher 类: 通过 Pattern 类取得.</li></ul><h4 id="3-2、正则标记-背熟"><a href="#3-2、正则标记-背熟" class="headerlink" title="3.2、正则标记(背熟)"></a>3.2、正则标记(背熟)</h4><p>​所有的正则可以使用的标记都在 java.util.regex.Pattern 类里面定义. </p><p>1、单个字符(数量: 1)</p><ul><li>字符: 表示由一位字符所组成; </li><li>\: 表示转义字符 “\”; </li><li>\t: 表示一个 “\t” 符号;</li><li>\n: 匹配换行 (\n) 符号.</li></ul><p>2、字符集(数量: 1)</p><ul><li>[abc]: 表示可能是字符 a 或者是字符 b 或者是字符 c 中的任意一位;</li><li>[^abc]: 表示不是 a,b,c 中的任意一位;</li><li>[a-z]: 所有的小写字母;</li><li>[a-zA-Z]: 表示任意的以为字母, 不区分大小写; </li><li>[0-9]: 表示任意的一位数字;</li></ul><p>3、简化的字符集表达式(数量: 1)</p><ul><li>. : 表示任意的一位字符;</li><li>\d: 等价于 “[0-9]”, 属于简化写法; </li><li>\D: 等价于 “[^0-9]”, 也属于简化写法; </li><li>\s: 表示任意的空白字符, 例如: “\t”, “\n”; </li><li>\S: 表示任意的非空白字符;</li><li>\w: 等价于 “[a-zA-Z_0-9]”, 表示由任意的字母, 数字, _所组成;</li><li>\W: 等价于 “[^a-zA-Z_0-9]”, 表示不是由任意的字母, 数字, _所组成;</li></ul><p>4、边界匹配(不要在 java 中使用, 在 JavaScript 中使用)</p><ul><li>^: 表示正则的开始;</li><li>$: 表示 正则结束;</li></ul><p>5、数量表达</p><ul><li>正则?: 表示此正则可以出现 0 次或 1 次; </li><li>正则+: 表示此正则可以出现 1 次或 1 次以上; </li><li>正则*: 表示此正则可以出现 0 次或 1 次或多次; </li><li>正则{n}: 表示此正则正好出现 n 次; </li><li>正则{n, }: 表示此正则出现 n 次或 n 次以上;</li><li>正则{n, m}: 表示此正则出现 n~m 次;</li></ul><p>6、逻辑运算: </p><ul><li>正则 1 正则 2: 正则 1 判断完成之后继续判断正则 2;  </li><li>正则 1 | 正则 2: 正则 1 或者是正则 2 有一组满足即可;</li><li>(正则): 将多个正则作为一组, 可以为这一组单独设置出现的次数.</li></ul><h4 id="3-3、String-类对正则的支持-重点"><a href="#3-3、String-类对正则的支持-重点" class="headerlink" title="3.3、String 类对正则的支持(重点)"></a>3.3、String 类对正则的支持(重点)</h4><p>​在 JDK1.4 之后, 由于正则的引入, 所以 String 类里面也增加了相应的方法. </p><table><thead><tr><th align="center">No.</th><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><em><strong>1</strong></em></td><td align="center"><em><strong>public boolean matches(String regex)</strong></em></td><td align="center"><em><strong>普通</strong></em></td><td align="center"><em><strong>正则验证, 使用指定的字符串判断其是否符合给出的正则表达式结构</strong></em></td></tr><tr><td align="center"><strong>2</strong></td><td align="center"><strong>public String replaceAll(String regex, String replacement)</strong></td><td align="center"><strong>普通</strong></td><td align="center"><strong>全部替换</strong></td></tr><tr><td align="center"><strong>3</strong></td><td align="center"><strong>public String replaceFirst(String regex, String replacement)</strong></td><td align="center"><strong>普通</strong></td><td align="center"><strong>替换首个</strong></td></tr><tr><td align="center">4</td><td align="center">public String[] split(String regex)</td><td align="center">普通</td><td align="center">全部拆分</td></tr><tr><td align="center">5</td><td align="center">public String[] split(String regex, int limit)</td><td align="center">普通</td><td align="center">部分拆分</td></tr></tbody></table><p>​给出的几个方法里面对于替换和拆分实际上难度不高, 最关键的就是正则匹配, 在验证上使用的特别多. </p><p><strong>范例</strong>: 实现字符串替换</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;ahdjaTEDDSljkjk43$%#423ll23j3@$% ;23)(21aT23q&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[^a-z]&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.replaceAll(regex, <span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>: 字符串拆分</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Kj5ljhk3hkj45k2nl2klLK2111LJJ@3L4llw&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">String result [] = str.split(regex) ;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; result.length ; x ++) &#123;</span><br><span class="line">System.out.println(result[x]) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​所有正则之中最应该引起我们兴奋的事情是因为可以使用它进行验证. </p><p><strong>范例</strong>: 验证一个字符串是否是数字, 如果是则将其变为 double 型</p><ul><li>数字可能是整数(10)也可能是小数(10.2);</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;10.2&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+(\\.\\d+)?&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line"><span class="keyword">if</span> (str.matches(regex)) &#123; <span class="comment">// 转型之前要进行验证</span></span><br><span class="line">System.out.println(Double.parseDouble(str)) ;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(str) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>: 判断给定的字符串是否是一个 IP 地址 (IPV4)</p><ul><li>IP 地址: 172.16.40.1, 每一段最大是三个长度(1~3 个长度都可以);</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;172.16.40.1&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125;&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>: 给定一个字符串, 要求判断其是否是日期格式, 如果是则将其转换为 Date 格式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2022-09-29&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line"><span class="keyword">if</span> (str.matches(regex)) &#123;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(str) ;</span><br><span class="line">System.out.println(date) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例: 判断电话号码, 一般要编写电话号码以下几种格式都是满足的: </p><ul><li>格式一: 40000008, 一般长度是 7~8 位的数字是电话号码; (“\d{7,8}”)</li><li>格式二: 010-40000008, 区号一般是 3~4 位, 而且区号和电话之间的 “-” 只有出现区号时才出现; (“(\d{3,4}-)?\d{7,8}”)</li><li>格式三: (010)-40000008, 所有括号要一对出现; (“((\d{3,4}-)|(\(\d{3,4}\)-))?\d{7,8}”)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;(010)-40000008&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((\\d&#123;3,4&#125;-)|(\\(\\d&#123;3,4&#125;\\)-))?\\d&#123;7,8&#125;&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>: 验证 email 地址</p><ul><li>要求格式一: email 由字母, 数字, _组成;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello_8888@hdty.cn&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\w+@\\w+\\.\\w+&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​虽然上述操作能够验证 email 地址, 但是如果将地址换成 “<a href="mailto:&#x68;&#x65;&#108;&#x6c;&#111;&#x5f;&#56;&#56;&#56;&#56;&#64;&#x68;&#x64;&#116;&#121;&#46;&#115;&#97;&#100;&#x61;&#x73;&#100;&#x61;&#115;&#97;&#115;&#100;">&#x68;&#x65;&#108;&#x6c;&#111;&#x5f;&#56;&#56;&#56;&#56;&#64;&#x68;&#x64;&#116;&#121;&#46;&#115;&#97;&#100;&#x61;&#x73;&#100;&#x61;&#115;&#97;&#115;&#100;</a>“ , 也可以验证通过返回 true, 因此, 上述方法无法进行实际的验证. </p><ul><li>要求格式二: 用户名要求由字母, 数字, _, .组成, 其中必须以字母开头, 可以以字母和数字结尾, 用户名长度不超过30, 最后的根域名只能够是 .com, .cn, .net, .com.cn, .net.cn, .edu, .gov, .org</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat; </span><br><span class="line"><span class="keyword">import</span> java.util.Date; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello.nihao21_889@hdty.cn&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-zA-Z][a-zA-Z0-9_\\.]&#123;0,28&#125;[a-zA-Z0-9]@\\w+\\.(net|cn|com\\.cn|net\\.cn|org|gov|edu)&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line">System.out.println(str.matches(regex)) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>注意</strong>: 一个复杂的正则表达式无法一次性写出, 需要大量细致的分析过后, 一步一步完善.</em> </p><h4 id="3-4、java-util-regex-包支持-理解"><a href="#3-4、java-util-regex-包支持-理解" class="headerlink" title="3.4、java.util.regex 包支持(理解)"></a>3.4、java.util.regex 包支持(理解)</h4><p>​在大多数情况下使用正则的时候都会采用 String 类完成, 但是正则最原始的开发包是 java.util.regex , 这个包里面提供有两个类. </p><p><strong>范例</strong>: Pattern类, 编译正则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a1b2244j4guj5h34j4hj3433332432424f&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex) ; <span class="comment">// 编译正则</span></span><br><span class="line">String result [] = pattern.split(str) ; <span class="comment">// 拆分字符串</span></span><br><span class="line">System.out.println(Arrays.toString(result)) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>范例</strong>: Matcher 类, 字符串验证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRegex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;4565424&quot;</span> ;</span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+&quot;</span> ; <span class="comment">// 此处编写正则</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex) ; <span class="comment">// 编译正则</span></span><br><span class="line"><span class="type">Matcher</span> <span class="variable">mat</span> <span class="operator">=</span> pattern.matcher(str) ; <span class="comment">// 进行正则匹配</span></span><br><span class="line">System.out.println(mat.matches()) ; <span class="comment">// 匹配结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​正是因为 String 类本身就已经支持这两种操作了, 所以对于 String 类而言由于所有接收的也都是字符串, 很少会再去利用这两个类进行操作了. </p><h4 id="3-5、总结"><a href="#3-5、总结" class="headerlink" title="3.5、总结"></a>3.5、总结</h4><p>1、利用正则实现验证代码可以最少化;</p><p>2、一定要清楚 String 类对正则支持的几个方法, 以及上述所有相关程序; </p><p>3、一个复杂的正则表达式无法一次性写出, 需要大量细致的分析过后, 一步一步完善.</p>]]></content>
      
      
      <categories>
          
          <category> 杂⑦杂⑧ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指南 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雨夜</title>
      <link href="/2024/01/06/poem/%E9%9B%A8%E5%A4%9C/"/>
      <url>/2024/01/06/poem/%E9%9B%A8%E5%A4%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="雨夜"><a href="#雨夜" class="headerlink" title="雨夜"></a>雨夜</h2><p>雨夜，小雨淅淅。</p><p>船夫也进入船舱歇息，任凭小船在江面飘荡。烛影伴着船头灯笼摇晃，不甚刺眼。</p><p>船夫先把四方小桌摆好，然后从夹层取出一碟牛肉，一壶酒，一副筷子还有一个酒杯。边吃，边看着雨幕出神。</p><p>一啄一饮中，他的身子渐渐回暖，体温烘干了衣裳。左手食指不住地敲打着桌子，节奏并不快。边吃，边听着雨声出神。</p><p>所幸，这雨并不大，敲击在舱顶的声音也不尽悦耳。夜已深，鱼儿沉入江底入眠。人未睡，江边深山路已泥泞。</p><p>船外灯笼忽明忽暗，似要被雨点打灭，船夫也已收起方桌，端着酒壶侧卧，敞胸露乳，就像那弥勒佛一般，笑看天下红尘事。</p><p>可这方圆荒无人烟，只一无帆单船相衬，那船夫蓑衣也破，船舱烛火也熄，眼角笑意已去，思绪早飞往不可知之地。</p>]]></content>
      
      
      <categories>
          
          <category> 杂⑦杂⑧ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 短文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
